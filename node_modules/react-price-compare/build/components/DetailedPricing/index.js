var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { Component } from 'react';
import PropTypes from 'prop-types';
//import './styles.css'


class DetailedPricing extends Component {

  constructor(props) {
    super(props);
    this.state = _extends({}, props);
    this.state.features = Reflect.ownKeys(props.features || {}).map(key => props.features[key]()).sort((a, b) => a.rank <= b.rank ? -1 : 1);
  }

  render() {
    const { plans, features, inverse } = this.state;
    const { renderHead, renderFeatureRow } = DetailedPricing;

    return React.createElement(
      'div',
      { className: 'plans-comparison' },
      React.createElement(
        'table',
        { className: `table table-sm ${inverse ? 'inverse' : ''}` },
        React.createElement(
          'thead',
          null,
          React.createElement(
            'tr',
            null,
            React.createElement(
              'th',
              { key: 'details-heading', className: 'features-column' },
              React.createElement(
                'span',
                null,
                'Features'
              )
            ),
            plans && plans.map(renderHead)
          )
        ),
        React.createElement(
          'tbody',
          null,
          features && features.map(renderFeatureRow(plans))
        )
      )
    );
  }
}

DetailedPricing.propTypes = {
  inverse: PropTypes.bool,
  features: PropTypes.shape({}).isRequired,
  plans: PropTypes.arrayOf(PropTypes.shape({
    color: PropTypes.string,
    className: PropTypes.string,
    id: PropTypes.string.isRequired,
    name: PropTypes.node.isRequired,
    price: PropTypes.node,
    featuredItems: PropTypes.arrayOf(PropTypes.shape({
      text: PropTypes.node.isRequired,
      icon: PropTypes.string
    })),
    details: PropTypes.arrayOf(PropTypes.shape({
      text: PropTypes.string.isRequired,
      icon: PropTypes.string
    })),
    available: PropTypes.bool
  })).isRequired
};
DetailedPricing.defaultProps = {
  details: {},
  inverse: true
};

DetailedPricing.renderHead = plan => {
  return React.createElement(
    'th',
    {
      key: plan.id,
      className: `plan-name ${plan.className || ''}`
    },
    plan.name
  );
};

DetailedPricing.renderRowItem = ({ planFeature, planId, columnClass }) => {
  const displayValue = planFeature.value || planFeature.defaultValue;
  const className = `${columnClass} ${displayValue ? 'plan-value' : 'empty'}`;

  return React.createElement(
    'td',
    {
      className: `${className} text-center`,
      key: planId
    },
    React.createElement(
      'span',
      { className: columnClass || 'text-muted' },
      displayValue || '--'
    )
  );
};

DetailedPricing.renderFeatureRow = plans => feature => {
  const planFeatures = plans.map(plan => {
    const planFeature = plan.details.find(feat => feat.name === feature.name);
    return {
      planId: plan.id,
      planFeature: planFeature || feature,
      columnClass: plan.className || ''
    };
  });

  return React.createElement(
    'tr',
    {
      key: feature.name
    },
    React.createElement(
      'td',
      { key: 'first-td', className: 'feature-name' },
      React.createElement(
        'strong',
        null,
        feature.name
      )
    ),
    planFeatures && planFeatures.map(DetailedPricing.renderRowItem)
  );
};

export default DetailedPricing;