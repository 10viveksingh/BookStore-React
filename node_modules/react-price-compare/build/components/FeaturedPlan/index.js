import React, { Component } from 'react';
import PropTypes from 'prop-types';
//import './styles.css'


const ListItem = ({ id, icon, text, className = '' }) => {
  return React.createElement(
    'li',
    { key: `${id}.${icon}.${text}`.replace(/\s/g, '-'), className: className },
    icon && React.createElement(
      'i',
      { className: `glyphicon glyphicon-${icon}` },
      ' '
    ),
    text
  );
};

class FeaturedPlan extends Component {

  render() {

    const {
      onSelection,
      buttonText,
      units,
      colSize,
      image,
      plan: {
        payCycleLabel,
        id: planId,
        price,
        featuredItems,
        color,
        name: planName,
        available,
        className,
        customBtnText,
        trials
      }
    } = this.props;

    // innerClassName :: String
    // (Gives color and style to wrapper)
    const innerClassName = `inner plan-bg-${color} ${className}`;

    // optionAvailable :: Boolean
    // (Disables the button if plan is unavailable or no onSelection function)
    const optionNotAvailable = !(available && typeof onSelection === 'function');

    // showImage :: Boolean
    // (Render image if image object passed into props)
    const showImage = Boolean(image && typeof image === 'object');

    const priceLabel = `price ${typeof price !== 'number' ? 'label' : ''}`;

    const showBottomTrial = trials && trials.bottom && trials.bottom.content;
    const showTopTrial = trials && trials.top && trials.top.content;

    return React.createElement(
      'div',
      { className: innerClassName },
      React.createElement(
        'section',
        { className: priceLabel },
        units && React.createElement(
          'sup',
          null,
          units
        ),
        price,
        React.createElement(
          'small',
          null,
          payCycleLabel
        ),
        showTopTrial && React.createElement(
          'div',
          { className: 'trial trial-top' },
          React.createElement(
            'button',
            {
              onClick: () => onSelection(trials.top.planId || planId),
              className: 'btn trial-btn'
            },
            trials.top.content
          )
        )
      ),
      React.createElement(
        'section',
        { className: 'type-wrapper' },
        React.createElement(
          'div',
          { className: 'type' },
          planName
        )
      ),
      React.createElement(
        'section',
        { className: 'featured' },
        featuredItems && React.createElement(
          'ul',
          null,
          featuredItems.map(ListItem)
        ),
        showImage && React.createElement(
          'div',
          { className: 'img img-responsive' },
          React.createElement('img', { src: image.src, alt: Image.alt })
        )
      ),
      React.createElement(
        'div',
        { className: 'purchase-plan' },
        React.createElement(
          'button',
          {
            onClick: () => onSelection(planId),
            disabled: optionNotAvailable,
            className: 'btn-lg purchase-btn'
          },
          customBtnText || buttonText
        )
      ),
      showBottomTrial && React.createElement(
        'div',
        { className: 'trial trial-bottom' },
        React.createElement(
          'button',
          {
            onClick: () => onSelection(trials.bottom.planId || planId),
            className: 'btn trial-btn'
          },
          trials.bottom.content
        )
      )
    );
  }
}

FeaturedPlan.propTypes = {
  onSelection: PropTypes.func,
  buttonText: PropTypes.node,
  units: PropTypes.string,
  colSize: PropTypes.number,
  image: PropTypes.shape({
    src: PropTypes.string.isRequired,
    alt: PropTypes.string.isRequired
  }),
  plan: PropTypes.shape({
    color: PropTypes.string,
    name: PropTypes.node.isRequired,
    price: PropTypes.node,
    id: PropTypes.string.isRequired,
    className: PropTypes.string,
    customBtnText: PropTypes.string,
    payCycleLabel: PropTypes.string,
    trials: PropTypes.shape({
      top: PropTypes.object,
      bottom: PropTypes.object
    }),
    featuredItems: PropTypes.arrayOf(PropTypes.shape({
      text: PropTypes.string.isRequired,
      icon: PropTypes.string
    })),
    available: PropTypes.bool
  }).isRequired
};
FeaturedPlan.defaultProps = {
  colSize: 4,
  units: '$',
  buttonText: 'ORDER NOW',
  plan: {
    className: '',
    color: 'one',
    price: '--',
    available: true,
    payCycleLabel: ''
  },
  trials: {}
};
export default FeaturedPlan;